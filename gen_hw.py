# -*- coding: utf-8 -*-
"""Gen_hw.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mKoSDl9ZmwG4xCNSPsLzAI6x-2-4KqZd

Доработать класс FlatIterator в коде ниже. Должен получиться итератор, который принимает список
списков и возвращает их плоское представление, т. е. последовательность, состоящую из вложенных элементов. Функция test в коде ниже также должна отработать без ошибок
"""

import itertools

class FlatIterator:

    def __init__(self, list_of_list):
        self.list_of_list = list_of_list

    def __iter__(self):
        self.cursor = -1
        return self

    def __next__(self):
        self.cursor +=1
        item = list(itertools.chain(*self.list_of_list)) # превращаем все в один массив
        if self.cursor == len(item): # ограничение на работу метода Next
          raise StopIteration


        return item[self.cursor]

def test_1():

    list_of_lists_1 = [
        ['a', 'b', 'c',],
        ['d', 'e', 'f', 'h', False],
        [1, 2, None]
    ]

    for flat_iterator_item, check_item in zip(
            FlatIterator(list_of_lists_1),
            ['a', 'b', 'c', 'd', 'e', 'f', 'h', False, 1, 2, None]
    ):

        assert flat_iterator_item == check_item

    assert list(FlatIterator(list_of_lists_1)) == ['a', 'b', 'c', 'd', 'e', 'f', 'h', False, 1, 2, None]


if __name__ == '__main__':
    test_1()

"""Доработать функцию flat_generator. Должен получиться генератор, который принимает список списков и возвращает их плоское представление. Функция test в коде ниже также должна отработать без ошибок."""

import types


def flat_generator(list_of_list):
    item = list(itertools.chain(*list_of_list))
    yield from item



def test_2():

    list_of_lists_1 = [
        ['a', 'b', 'c'],
        ['d', 'e', 'f', 'h', False],
        [1, 2, None]
    ]

    for flat_iterator_item, check_item in zip(
            flat_generator(list_of_lists_1),
            ['a', 'b', 'c', 'd', 'e', 'f', 'h', False, 1, 2, None]
    ):

        assert flat_iterator_item == check_item

    assert list(flat_generator(list_of_lists_1)) == ['a', 'b', 'c', 'd', 'e', 'f', 'h', False, 1, 2, None]

    assert isinstance(flat_generator(list_of_lists_1), types.GeneratorType)


if __name__ == '__main__':
    test_2()